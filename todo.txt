-Add more (and working) examples
    -[done] Simple experiment streaming data
    -[done] Buffered experiment, with File IO (record raw data, store raw data to disk, and then re-load them to convert the raw data to 3D array)
    -[done] Add example when you stream data to the buffer and monitor data real-time as well
    -Virtual marker simple example
    -Virtual marker drawing script0
-DataBufferInitializeMem-based optotrak_record_a_trial() C wrapper function (once the pointer problem is solved)
-Center of mass displacement calculation? (where possible: centroid median distance?)
-Docs: Make a list of what API functions work, and when is recommended to use wrapper functions


-[fail] non-blocked real-time data (DataIsReady() corrupts comms between host and SCU)
-[done] Add convenience script for stopping buffering (because the file with id=0 must be closed...)
-[done] Add convenience script for loading a camera parameter file
-[done] Get coordinates of marker
-[done] Function that calculates the distance between two 3D points
-[done] Boolean function that tells whether two coordinates are within proximity to each other (to an optionally specified tolerance)
-[done] Boolean function that tells whether two markers are close to each other (to an optionally specified tolerance)
-[done]Buffered data init (allocate memory, spool, etc.)
    -[fail]method is: Initialise to capture raw data, spool it to the memory, and then convert it with the built-in C functions.
    -[done] Good old FileIO method, saving raw data and then converting it semi-online
-[done] Keep the naming convention of the convenience scripts consistent!
-[done] Write docs to optotrak_is_a_coord_close_to_a_plane()
-[done] Write docs to optotrak_is_a_marker_close_to_a_plane()
-[done] Rigid body generator script
    -[done] Make 3D marker holder as a rigid body (mostly to test the rigid body generator script)
    -[fail] rigid body generator script error management
-[done] Calibration: Create rigid body for the desk
-[done] Virtual markers from rigid bodies (basically, translation from a rigid body center of mass to a point)
    -[fail] Get the internal imaginary marker feature to work outside NDI's software
    -[done] Make custom virtual marker management scripts based on the rigid body
-Virtual marker declaration and assignment WITHOUT rigid bodies
    -[done] Calculate translation and rotation of bunch of markers
    -[done, made a unified one instead] Define virtual markers
-[done, fails] STATIC Multi-sensor alignment script (record and save raw data with rigid body, shove it to the C-code, get the camera file)
-[done, for 6 markers] Volciclab universal rigid body for six markers, along with the rigid body file, 1mm tolerance
-[done] IMPORTANT: docs of wrapper functions, the calibration process, and rigid body creation
-[done], testing needed]Restore a virtual marker with a given definition
-[done] Calibration script (record and save raw data with rigid body)
-[done] DYNAMIC multi-sensors alignment script
-[done] Adaptive multi-sensor registration and alignment script: detect how many cameras we have, and execute the necessary functions.
-[nope, will do in expt code] Add trial management functions (record n trials, etc.)
-[done] add primitive plotting and marker visibility functions
-[done] Turn on markers at the end of optotrak_set_up_system


Limitations:
-No direct raw data handling in Matlab
-Raw file to position3d conversion can only be done on a properly initialised system
-Rigid body transforms are Euler only
-non-blocking mode doesn't work (Request -> wait -> receive). Repeated call of DataIsReady seem to corrupt communication, leading to MessageSystem errors. Tested via Matlab's shared library, on 64-bit Windows.
-ODAU features are not implemented yet. Probably needs some C code to handle data.
-The system must be calibrated in metric.
-Not all scripts are completely foolproofed. While most scripts do have built-in error management, it's no substitute for regular sanity checks in your code. Make sure you debug your code, and check if results are as expected. 
-nOptotrakCalibrigSystem() fails.


Add to docs:
-[done] Why raw data files? Because you can convert later-on, and the calibration uses it with multiple sensors.
-[done] Why do I have to initialise the Optotrak system just to convert a raw file?
-[done] Docs: Explain what's in the config file
-[done] Docs: Add function declarations to EVERY function comment
-[done] Docs: Update wrapper function helper documentation